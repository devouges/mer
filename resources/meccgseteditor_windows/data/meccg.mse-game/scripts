############################################################## Localization

include file: language

#############################################################Default matching
	numbers_only := filter_rule(match: "[*+0-9-]")
	#symbols_only := filter_rule(match: "[?dDsSbBfFHKRwc]")
	#sites_only := filter_text(match: "[DSBFHKR]", input: value)

	############################################################
	###Card Categorization Scripts
	############################################################
		#is_wizard := { contains(card.background, match: "wizard") }
		is_region := { contains(card.background, match: "Region") }
		is_regionvertical := { contains(card.background, match: "RegionVertical") }
		is_regionhorizontal := { contains(card.background, match: "RegionHorizontal") }
		is_hazard := { contains(card.background, match: "Hazard") }
		is_hero := { contains(card.background, match: "Hero") }
		is_minionhero := { contains(card.background, match: "MinionHero") }
		is_minion := { contains(card.background, match: "Minion") and not contains(card.background, match: "Balrog") }
		is_stage := { contains(card.background, match: "Stage") }
		is_ally := { contains(card.background, match: "Ally") }
		is_avatar := { contains(card.background, match: "Avatar") }
		is_character := { contains(card.background, match: "Character") }
		is_agent := { contains(card.background, match: "Agent") }
		is_hazardagent := { contains(card.background, match: "Haz") }
		is_creature := { contains(card.background, match: "Creature") }
		is_site := { contains(card.background, match: "Site") }
		is_minion_site := { contains(card.background, match: "MinionSite") }
		is_balrog_site := { contains(card.background, match: "BalrogSite") }
		is_stage_site := { contains(card.background, match: "SiteStage") }
		is_minionhero_site := { contains(card.background, match: "SiteMH") }
		is_event := { contains(card.background, match: "Event") }
		is_item := { contains(card.background, match: "Item") }
		is_resource := { not is_character() and not is_site() and not is_hazard() and not is_avatar() }
		is_balrog := { contains(card.background, match: "Avatar Balrog") }
		is_ringwraith := { contains(card.background, match: "Ringwraith") }
		is_fallenwizard := { not is_dreamcard() and is_avatar() and is_stage() }
		is_dreamcard := { contains(card.background, match: "lord") }
		is_elflord := { contains(card.background, match: "Elflord") }
		is_dragonlord := { contains(card.background, match: "Dragonlord") }
		is_dwarflord := { contains(card.background, match: "Dwarflord") }
		is_manlord := { contains(card.background, match: "Manlord") }
		is_Dunadanlord := { contains(card.background, match: "Dunadanlord") }
		has_cp := { not is_site() or not is_region() }
		has_mind := { not is_region() or is_resource() or is_character() or is_avatar() or is_agent() or (is_hazard() and is_event()) or is_dreamcard() }
		has_influence := { is_resource() or is_character() or is_avatar() or is_agent() or (is_hazard() and is_event()) }
		has_influence2 := { is_dreamcard() or (not is_stage() and is_resource() and is_item()) }
		has_influenceg := { (is_avatar() and is_stage()) or (is_stage() and is_event()) }
		has_sp := { (is_resource() and is_stage()) or (is_site() and is_stage()) or (is_hazard() and is_event()) or (is_minion() and is_resource()) }
		has_home_site := { is_character() or is_avatar() or is_agent() }
		has_diagonalprowess := { contains(card.background, match: "DiagonalPB") }
		is_gandalf := { contains(card.background, match: "Gandalf") }
		is_alatar := { contains(card.background, match: "Alatar") }
		is_pallando := { contains(card.background, match: "Pallando") }
		is_radagast := { contains(card.background, match: "Radagast") }
		is_saruman := { contains(card.background, match: "Saruman") }
		is_wizard := { is_gandalf() or is_alatar() or is_pallando() or is_radagast() or is_saruman() }

###############################################################Corruption Icon Scripts
corruption_icon := {
	if is_wizard() then "cp_icon_blank.png"
	else if (is_minionhero() and is_character()) then "/meccg-remastered.mse-include/cp_icons/cp_icon_hero_character.png"
	else if is_minionhero() then "/meccg-remastered.mse-include/cp_icons/cp_icon_hero.png"
	else if (is_hero() and is_character()) then "/meccg-remastered.mse-include/cp_icons/cp_icon_hero_character.png"
	else if (is_minion() and is_character()) then "/meccg-remastered.mse-include/cp_icons/cp_icon_minion_character.png"
	else if (is_minion() and is_hazard()) then "/meccg-remastered.mse-include/cp_icons/cp_icon_minion_character.png"
	else if is_minion() then "/meccg-remastered.mse-include/cp_icons/cp_icon_minion.png"
	else if is_hazard() then "/meccg-remastered.mse-include/cp_icons/cp_icon_hazard.png"
	else if is_hazardagent() then "/meccg-remastered.mse-include/cp_icons/cp_icon_hazard.png"
	else if is_elflord() then "/meccg-remastered.mse-include/cp_icons/cp_icon_elflord.png"
	else if is_dwarflord() then "/meccg-remastered.mse-include/cp_icons/cp_icon_dwarflord.png"
	else if is_dragonlord() then "/meccg-remastered.mse-include/cp_icons/cp_icon_dragonlord.png"
	else if is_stage() then "/meccg-remastered.mse-include/cp_icons/cp_icon_stage.png"
	else "/meccg-remastered.mse-include/cp_icons/cp_icon_hero.png"
	}

###########################################################Stage avatar unique icons
stage_unique_icon := {
	if card.fw == "MG" then "/meccg-remastered.mse-include/stage_res_icons/mgstage.png"
	else if card.fw =="PA" then "/meccg-remastered.mse-include/stage_res_icons/pastage.png"
	else if card.fw =="GA" then "/meccg-remastered.mse-include/stage_res_icons/gastage.png"
	else if card.fw =="SA" then "/meccg-remastered.mse-include/stage_res_icons/sastage.png"
	else if card.fw =="AL" then "/meccg-remastered.mse-include/stage_res_icons/alstage.png"
	else if card.fw =="RA" then "/meccg-remastered.mse-include/stage_res_icons/rastage.png"
	else "/meccg-remastered.mse-include/stage_res_icons/wlkstage.png"

	}

############################################################## Card number

# Process the name for sorting rules
sort_name :=
	# Remove "The", "A", and "And" at the beginning
	replace@(match: "^(The|An?) ", replace: "") +
	# Remove commas and apostrophes
	replace@(match: "(,|'|’)", replace: "") +
	# Remove bold and italic tags
	replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") +
	# Make lowercase
	to_lower


card_number := {
	position (
		of: card
		in: set
		order_by: { sort_name(card.name) }
	) + 1
}
card_count := {
	number_of_items(in: set)
}

#Zero digits in card numbers should be shown up to three.
card_number_m15 := { (if card_number() < 100 then "0" else "") + (if card_number() < 10 then "0" else "") + card_number() }
card_count_m15 := { (if card_count() < 100 then "0" else "") + (if card_count() < 10 then "0" else "") + card_count() }

#######################################################################Spell Checking Filters
text_filter :=
	#Replace double dash to long dash
	replace@(
		match: "--"
		replace: "—"
	) +

	############################################
	#Add CvCC Icon from Brackets
	replace@(
		match: "\\[[CV/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add Site Icons from Brackets
	replace@(
		match: "\\[[wcfbsdHFBRSDKejP/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add tap Icon from Brackets
	replace@(
		match: "\\[[tap/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add MP Icon from Brackets
	replace@(
		match: "\\[[mp/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add General Influence Icon from Brackets
	replace@(
		match: "\\[[GI/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add Direct Influnce Icon from Brackets
	replace@(
		match: "\\[[EI/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add Corruption Check Icon from brackets
	replace@(
		match: "\\[[CC/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	#Add Corruption Icon from brackets
	replace@(
		match: "\\[[CP/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
##################################################
##Replaces to remove italics from brackets
##################################################
	#Format site icon brackets (no italics)
	replace@(
		match: ("\\[")
		replace: "</i>"+ ("\\[")
	) +
	#Format site icon brackets (no italics)
	replace@(
		match: ("\\]")
		replace: ("\\]") +"<i>"
	) +
#################################################
	# Spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: language().spellcheck_code,
			extra_dictionary: "/meccg.mse-game/meccg-words"
		)
	  else input
	} +
	curly_quotes


#################################################################
#### Flavor Text Filter and Checks
#################################################################
flavor_text_filter :=
	#Replace double dash to long dash
	replace@(
		match: "--"
		replace: { "<b>" + "—" }
	) +
	# Spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: language().spellcheck_code,
			extra_dictionary: "/meccg.mse-game/meccg-words"
		)
	  else input
	} +
	#Set Size and Italics
	{ "<size:18><i>"+input+"</i></size>" } +
	curly_quotes

#######################################################################
######## Site Text Filter and Checks
###################################################################

###############Assign Variables for common text prefix
minion_site_first := "<b><i>" + "Nearest Darkhaven: " + "</i></b>"
hero_site_first := "<b><i>" + "Nearest Haven: " + "</i></b>"
balrog_site_first := "<b><i>" + "Adjacent Sites: " + "</i></b>"
stage_site_first := " "

#########Assign default prefix to sites based on type
site_default_text := {
	if is_minion_site() then minion_site_first
	else if is_balrog_site() then balrog_site_first
	else if is_minionhero_site() then balrog_site_first
	else if is_stage_site() then stage_site_first
	else hero_site_first
}

#######################Site Text Filter
site_text_filter :=
	#Replace double dash to long dash
	replace@(
		match: "--"
		replace: "—"
		) +
	#Replace single automatic attack dash to long dash
	replace@(
		match: " - "
		replace: " — "
		) +
	#Add Site Icons from Brackets
	replace@(
		match: "\\[[wcfbsdHFBRSDKejP/|]+\\]",
		replace: {"<sym>" + input + "</sym>"} ) +
	# Spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: language().spellcheck_code,
			extra_dictionary: "/meccg.mse-game/meccg-words"
		)
	  else input
	}

######################################################################
######## Title Text Spell Checking
######################################################################
title_text_filter :=
	# Spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: language().spellcheck_code,
			extra_dictionary: "/meccg.mse-game/meccg-words"
		)
	  else input
	}

	######################################################################
	######## Card Class Filter and Spelling
	######################################################################

class_text_filter :=
#############Ensure proper formatting for events
	replace@(
		match: "Short-Event"
		replace: "Short-event"
		) +
	replace@(
		match: "short-event"
		replace: "Short-event"
		) +
	replace@(
		match: "short-Event"
		replace: "Short-event"
		) +
	replace@(
		match: "Long-Event"
		replace: "Long-event"
		) +
	replace@(
		match: "long-event"
		replace: "Long-event"
		) +
	replace@(
		match: "long-Event"
		replace: "Long-event"
		) +
	replace@(
		match: "Permanent-Event"
		replace: "Permanent-event"
		) +
	replace@(
		match: "permanent-event"
		replace: "Permanent-event"
		) +
	replace@(
		match: "permanent-Event"
		replace: "Long-event"
		) +
		# Spellcheck
		{ if set.mark_errors then
			check_spelling(
				language: language().spellcheck_code,
				extra_dictionary: "/meccg.mse-game/meccg-words"
			)
		  else input
		}


########################################################################
#### Color Lists
########################################################################
white := { rgb(255,255,255) }
black := { rgb(0,0,0) }
silver := {rgb(128,128,128)}
gold := {rgb(200,180,0)}
blue := {rgb(0,71,124)}
green := {rgb(15,121,52)}
darkred := {rgb(153,0,0)}
darkgreen := {rgb(76,153,0)}
lightblue := {rgb(0,204,204)}
purple := {rgb(127,0,255)}
orange := {rgb(255,128,0)}
